[{"path":"https://finddx.github.io/find.dxgap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrea Ranzato. Author, maintainer. Mike John Page. Author.","code":""},{"path":"https://finddx.github.io/find.dxgap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ranzato , John Page M (2023). find.dxgap: Compute dxgap metric different diseases. R package version 0.1.0, https://finddx.github.io/find.dxgap/.","code":"@Manual{,   title = {find.dxgap: Compute dxgap metric for different diseases},   author = {Andrea Ranzato and Mike {John Page}},   year = {2023},   note = {R package version 0.1.0},   url = {https://finddx.github.io/find.dxgap/}, }"},{"path":[]},{"path":"https://finddx.github.io/find.dxgap/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compute dxgap metric for different diseases","text":"project aims find determinants DX Gap TB, generalise methods broader R package framework diseases. creates need project structure allows high-level reproducibility (using exact R package versions reproduce analyses calculating determinants) generalisability (methods work across different R package versions future). achieve reproducibility, renv package used create reproducibile environment. Take approach want exactly reproduce analyses performed part project. use project renv: Clone package HTTPS/SSH. first time running project, renv automatically bootstrap , downloading installing appropriate version renv. prompted download install packages needed running renv::restore(). achieve generalisability install project R package, DESCRIPTION file used specify package dependencies. Take approach want use functions ideas within package. can install development version find.dxgap GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"finddx/find.dxgap\") library(find.dxgap)"},{"path":"https://finddx.github.io/find.dxgap/index.html","id":"finddxgapdata","dir":"","previous_headings":"","what":"find.dxgap.data","title":"Compute dxgap metric for different diseases","text":"Clone find.dxgap.data get data project. following env. variable needs set establish connection find.dxgap find.dxgap.data. Please call, usethis::edit_r_environ(scope = \"user\") c/p following .Renviron file:","code":"DXGAP_DATADIR = \"/<path_to>/find.dxgap.data\""},{"path":[]},{"path":"https://finddx.github.io/find.dxgap/index.html","id":"tables","dir":"","previous_headings":"Usage","what":"Tables","title":"Compute dxgap metric for different diseases","text":"DXGAP_DATADIR set, build wide table given year disease: Optionally, time series can build: error raised, disease supported yet: #289 merged, tables different providers accessible unique function. instance: Please, refer find.dxgap.data available tables.","code":"tb_vars <- c(   \"year\", \"country\", \"is_hbc\", \"country_code\", \"who_dx_gap\", \"pop_total\",   \"pop_urban_perc\", \"pop_density\", \"gdp\", \"c_newinc\", \"e_inc_num\",   \"e_mort_100k\", \"culture\", \"smear\", \"xpert\", \"m_wrd\" )  build_tbl(\"tb\", year = 2019, vars = tb_vars) #> # A tibble: 190 × 15 #>     year country        is_hbc country_code pop_total pop_urban_perc pop_density #>    <dbl> <chr>           <dbl> <chr>            <dbl>          <dbl>       <dbl> #>  1  2019 Angola              1 AGO             3.24e7           66.2       26.0  #>  2  2019 Bangladesh          1 BGD             1.66e8           37.4     1272.   #>  3  2019 Brazil              1 BRA             2.12e8           86.8       25.3  #>  4  2019 Central Afric…      1 CAF             5.21e6           41.8        8.36 #>  5  2019 China               1 CHN             1.41e9           60.3      150.   #>  6  2019 Congo - Kinsh…      1 COD             8.99e7           45.0       39.7  #>  7  2019 Congo - Brazz…      1 COG             5.57e6           67.4       16.3  #>  8  2019 Ethiopia            1 ETH             1.14e8           21.2      101.   #>  9  2019 Indonesia           1 IDN             2.70e8           56.0      144.   #> 10  2019 India               1 IND             1.38e9           34.5      465.   #> # ℹ 180 more rows #> # ℹ 8 more variables: gdp <dbl>, c_newinc <dbl>, e_inc_num <dbl>, #> #   e_mort_100k <dbl>, culture <dbl>, smear <dbl>, xpert <dbl>, m_wrd <dbl> build_tbl(\"tb\", year = NULL, vars = tb_vars) #> # A tibble: 1,140 × 15 #>     year country    is_hbc country_code pop_total pop_urban_perc pop_density #>    <dbl> <chr>       <dbl> <chr>            <dbl>          <dbl>       <dbl> #>  1  2016 Angola          1 AGO           29154746           64.1        23.4 #>  2  2017 Angola          1 AGO           30208628           64.8        24.2 #>  3  2018 Angola          1 AGO           31273533           65.5        25.1 #>  4  2019 Angola          1 AGO           32353588           66.2        26.0 #>  5  2020 Angola          1 AGO           33428486           66.8        26.8 #>  6  2021 Angola          1 AGO           34503774           67.5        27.7 #>  7  2016 Bangladesh      1 BGD          159784568           35.1      1228.  #>  8  2017 Bangladesh      1 BGD          161793964           35.9      1243.  #>  9  2018 Bangladesh      1 BGD          163683958           36.6      1257.  #> 10  2019 Bangladesh      1 BGD          165516222           37.4      1272.  #> # ℹ 1,130 more rows #> # ℹ 8 more variables: gdp <dbl>, c_newinc <dbl>, e_inc_num <dbl>, #> #   e_mort_100k <dbl>, culture <dbl>, smear <dbl>, xpert <dbl>, m_wrd <dbl> build_tbl(\"covid\", year = NULL, vars = tb_vars) #> Error in `check_supported_disease()` at find.dxgap/R/load.R:26:3: #> ! Cannot find `covid` in `dxgap_diseases`. #> ✖ Disease is not supported yet. import_tbl(\"who_hbc_2023-07-28.csv\") import_tbl(\"gf_procurement_2023-07-26.csv\")"},{"path":"https://finddx.github.io/find.dxgap/index.html","id":"report","dir":"","previous_headings":"Usage","what":"Report","title":"Compute dxgap metric for different diseases","text":"templates implemented data exploration:","code":"view_templates() |>    writeLines() #> eda.Rmd #> eda_ts.Rmd #> explain_lm.Rmd #> missing.Rmd render_report(   \"eda_ts.Rmd\",    disease = \"tb\",   year = NULL, # the template requires `NULL`   interactive = TRUE,   vars = tb_vars ) render_report(   \"explain_lm.Rmd\",   disease = \"tb\",   year = 2019, # the template requires a year to be selected   interactive = TRUE,   vars = tb_vars )"},{"path":"https://finddx.github.io/find.dxgap/index.html","id":"objectives-of-the-project","dir":"","previous_headings":"","what":"Objectives of the project","title":"Compute dxgap metric for different diseases","text":"Support data analysis / processing development Shiny dashboard (TB Diagnostics Policy dashboard) show country : TB diagnostic landscape TB burden specifically show: Countries similar demographics improve learning algorithms Need testing region test type Assess readiness willingness countries new upcoming TB diagnostics Understand Gap testing TB incidence country Assess existing association algorithms TB incidence / % cases bacteriologically confirmed","code":""},{"path":"https://finddx.github.io/find.dxgap/index.html","id":"schema","dir":"","previous_headings":"","what":"Schema","title":"Compute dxgap metric for different diseases","text":"schema represents flow data package aid future developments:","code":""},{"path":"https://finddx.github.io/find.dxgap/index.html","id":"source","dir":"","previous_headings":"Schema","what":"Source:","title":"Compute dxgap metric for different diseases","text":"operational handbook TB - Dignosis Module Global TB report Global Epidemiology Tuberculosis Diagnosing diagnostic gaps","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/build_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Load all data for a disease into a single wide table — build_tbl","title":"Load all data for a disease into a single wide table — build_tbl","text":"build_tbl() loads files given disease single dataframe. flattening tables single wide table performing series cascading joins matching keys.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/build_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load all data for a disease into a single wide table — build_tbl","text":"","code":"build_tbl(disease, year = NULL, vars = NULL)"},{"path":"https://finddx.github.io/find.dxgap/reference/build_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load all data for a disease into a single wide table — build_tbl","text":"disease character length one identifying disease user wants build wide table. tibble dxgap_diseases shows diseases currently supported. year integer indicating year filter data . Defaults NULL, returning years present data. vars vector strings naming columns subset data . Defaults NULL, indicating variables used.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/build_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load all data for a disease into a single wide table — build_tbl","text":"tibble.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/build_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load all data for a disease into a single wide table — build_tbl","text":"","code":"if (FALSE) { build_tbl(\"tb\", 2019, c(\"year\", \"country\", \"pop_density\")) }"},{"path":"https://finddx.github.io/find.dxgap/reference/compute_completion_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute completion rate — compute_completion_rate","title":"Compute completion rate — compute_completion_rate","text":"compute_completion_rate() computes percentage non-missing values.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_completion_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute completion rate — compute_completion_rate","text":"","code":"compute_completion_rate(data, id_vars = NULL, digits = 2)"},{"path":"https://finddx.github.io/find.dxgap/reference/compute_completion_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute completion rate — compute_completion_rate","text":"data tibble. id_vars character vector variable names indicating groups counting NA performed. Default NULL indicating groups used. digits digits argument passed signif().","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_completion_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute completion rate — compute_completion_rate","text":"tibble.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_completion_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute completion rate — compute_completion_rate","text":"","code":"if (FALSE) { tbl <- build_tbl(\"tb\", 2019, vars = dxgap_const$tb_vars) compute_completion_rate(tbl, id_vars = c(\"year\", \"is_hbc\"))  cars_df <- tibble::as_tibble(mtcars, rownames = \"car_name\") compute_completion_rate(cars_df, id_vars = NULL) }"},{"path":"https://finddx.github.io/find.dxgap/reference/compute_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute correlations wrt to a target variable — compute_correlation","title":"Compute correlations wrt to a target variable — compute_correlation","text":"compute_correlation() allows compute correlation several numerical predictors respect target variable. Optionally, computation can done groups.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute correlations wrt to a target variable — compute_correlation","text":"","code":"compute_correlation(data, target_var, by = NULL, ...)"},{"path":"https://finddx.github.io/find.dxgap/reference/compute_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute correlations wrt to a target variable — compute_correlation","text":"data tibble. target_var variable correlations needs computed. instance, who_dx_gap. character vector. ... Optional arguments passed correlate()","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute correlations wrt to a target variable — compute_correlation","text":"tibble.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_correlation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute correlations wrt to a target variable — compute_correlation","text":"","code":"if (FALSE) { car_tbl <- as_tibble(mtcars, rownames = \"car_name\") my_cars <- select(car_tbl, -all_of(c(\"vs\", \"am\", \"carb\"))) compute_correlation(my_cars, mpg, by = c(\"gear\", \"cyl\")) compute_correlation(my_cars, mpg, by = NULL) # car_name is dropped by default }"},{"path":"https://finddx.github.io/find.dxgap/reference/compute_dx_gap.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the diagnostic gap — compute_dx_gap","title":"Compute the diagnostic gap — compute_dx_gap","text":"compute_dx_gap() calculates diagnostic gap defined proportion population condition undiagnosed.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_dx_gap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the diagnostic gap — compute_dx_gap","text":"","code":"compute_dx_gap(data)"},{"path":"https://finddx.github.io/find.dxgap/reference/compute_dx_gap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the diagnostic gap — compute_dx_gap","text":"data Input data. assumes variables e_inc_num c_newinc present data, describing number estimated notified cases respectively.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_dx_gap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the diagnostic gap — compute_dx_gap","text":"tibble, dimensions input data, one additional column called who_dx_gap containing computed diagnostic gap values","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_dx_gap.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the diagnostic gap — compute_dx_gap","text":"country year data, diagnostic gap can computed follows: diagnostic gap = (estimated cases - notified cases) / estimated cases words, can define diagnostic gap gap estimated number people fall ill year number people officially reported diagnosed. means diagnostic gap represents people illness officially diagnosed, due limitations challenges healthcare system.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/compute_dx_gap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the diagnostic gap — compute_dx_gap","text":"","code":"if (FALSE) { # Calculate diagnostic gap for 2019 TB data:  build_tbl(\"tb\", 2019, vars = dxgap_const$tb_vars) |>     compute_dx_gap() }"},{"path":"https://finddx.github.io/find.dxgap/reference/dxgap_master_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Data dictionary — dxgap_master_list","title":"Data dictionary — dxgap_master_list","text":"shows supported data project. kept --date.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/dxgap_master_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data dictionary — dxgap_master_list","text":"","code":"dxgap_master_list"},{"path":[]},{"path":"https://finddx.github.io/find.dxgap/reference/dxgap_master_list.html","id":"dxgap-master-list","dir":"Reference","previous_headings":"","what":"dxgap_master_list","title":"Data dictionary — dxgap_master_list","text":"data frame: data_source name data provider variable_name variable name url_endpoint endpoint data set can fetched programmatically definition Description variable_name url Url source, notes Additional notes, ","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/gf.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Global Fund — gf","title":"Data from Global Fund — gf","text":"help pages document lower-level API individually download, read, tidy Global Fund data. higher-level API works across data sets, see: write_data_dir() download data","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/gf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Global Fund — gf","text":"","code":"read_gf_procurement(file_name, data_dir = Sys.getenv(\"DXGAP_DATADIR\"))  tidy_gf_procurement(data, year = NULL)"},{"path":"https://finddx.github.io/find.dxgap/reference/gf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data from Global Fund — gf","text":"file_name string containing name file read. data_dir Path containing directory read data . Defaults path set environment variable \"DXGAP_DATADIR\". data tibble returned corresponding read_() function. year year filter data . Defaults NULL, returning data years.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/gf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data from Global Fund — gf","text":"read_gf_procurement() returns tibble containing data set. tidy_gf_procurement() returns tibble. tidied version input tibble.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/gf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from Global Fund — gf","text":"data sets currently supported Global Fund package : procurement","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/gf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Global Fund — gf","text":"https://insights.theglobalfund.org/t/Public/views/PriceQualityReportingTransactionSummary/TransactionSummary?iframeSizedToWindow=true&%3Aembed=y&%3AshowAppBanner=false&%3Adisplay_count=&%3AshowVizHome=?","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/gf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from Global Fund — gf","text":"","code":"if (FALSE) { read_gf_procurement(\"gf_procurement_2023-07-26.csv\") } if (FALSE) { read_gf_procurement(\"gf_procurement_2023-07-26.csv\") |>   tidy_gf_procurement() }"},{"path":"https://finddx.github.io/find.dxgap/reference/hbc.html","id":null,"dir":"Reference","previous_headings":"","what":"TB High-Burden Countries data from WHO — hbc","title":"TB High-Burden Countries data from WHO — hbc","text":"five years lists 20 + 10 countries classified \"High-Burden\". first 20 account roughly 80% share global incidence given 5 years period. last 10 accounts roughly 2%-3% share global incidence given 5 years period.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/hbc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TB High-Burden Countries data from WHO — hbc","text":"","code":"download_hbc(file_name)"},{"path":"https://finddx.github.io/find.dxgap/reference/hbc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TB High-Burden Countries data from WHO — hbc","text":"file_name string containing name file read.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/hbc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TB High-Burden Countries data from WHO — hbc","text":"download_hbc() returns invisibly file path data stored.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/hbc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TB High-Burden Countries data from WHO — hbc","text":"","code":"if (FALSE) { download_hbc(\"who_hbc_2023-07-28.pdf\") }"},{"path":"https://finddx.github.io/find.dxgap/reference/mod_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers to work out run_mod()'s output — mod_helpers","title":"Helpers to work out run_mod()'s output — mod_helpers","text":"following helpers extract elements list returned run_mod(). pull_mod_rank() extracts tibble summarising ranking pre-processing steps. pull_mod_best() extract best model id. pull_mod_coeff() extracts best model coefficient estimates. pull_mod_fit() extracts best model object. pull_mod_coeff_all() extracts coefficients estimates referenced year.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/mod_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers to work out run_mod()'s output — mod_helpers","text":"","code":"pull_mod_rank(mod_out_list)  pull_mod_best(rank_df)  pull_mod_coeff(mod_out_list)  pull_mod_fit(mod_out_list)  pull_mod_coeff_all(tbl, mod_const = tb_mod_const)"},{"path":"https://finddx.github.io/find.dxgap/reference/mod_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers to work out run_mod()'s output — mod_helpers","text":"mod_out_list list object returned run_mod(). rank_df tibble returned pull_mod_rank() tbl Input data frame containing data model. mod_const Default models specs returned list tb_mod_const.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/mod_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers to work out run_mod()'s output — mod_helpers","text":"pull_mod_rank() returns tibble. pull_mod_best() returns character length one. pull_mod_coeff() returns tibble. pull_mod_fit() returns object class _lm. pull_mod_coeff_all() returns tibble.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/mod_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers to work out run_mod()'s output — mod_helpers","text":"","code":"if (FALSE) { mod_objects <- run_mod(   tbl,   preproc = preproc_list,   mod = mod_list,   folds = tb_mod_const$folds,   metrics = tb_mod_const$metrics,   rank_metric = tb_mod_const$rank_metric, ) pull_mod_rank(mod_objects) } if (FALSE) { pull_mod_rank(mod_objects) |>   pull_mod_best() } if (FALSE) { pull_mod_coeff(mod_objects) } if (FALSE) { lm_obj <- pull_mod_fit(mod_objects) plot_check <- performance::check_model(   lm_obj,   check = c(\"linearity\", \"normality\", \"qq\", \"outliers\"),   theme = \"ggplot2::theme_minimal\" ) } if (FALSE) { tbl <-  build_tbl(\"tb\", year = NULL, vars = dxgap_const$tb_vars) |>  compute_dx_gap() |>  dplyr::mutate(is_hbc = forcats::as_factor(is_hbc)) |>  dplyr::select(-any_of(c(\"country\"))) coeff_df <- pull_mod_coeff_all(tbl) }"},{"path":"https://finddx.github.io/find.dxgap/reference/render.html","id":null,"dir":"Reference","previous_headings":"","what":"Render templates across multiple years — render_bulk","title":"Render templates across multiple years — render_bulk","text":"render_bulk() convenience wrapper around render_report() allows render templates across multiple years. render_report() generates report given template year. final output can viewed RStudio.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render templates across multiple years — render_bulk","text":"","code":"render_bulk(   template_name,   disease,   years = NULL,   vars = NULL,   override_vars_check = FALSE )  render_report(   template_name,   disease,   year = NULL,   vars = NULL,   interactive = TRUE,   override_vars_check = FALSE )"},{"path":"https://finddx.github.io/find.dxgap/reference/render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render templates across multiple years — render_bulk","text":"template_name String containing name template render. Run view_templates() see list valid options. disease character length one identifying disease user wants build wide table. tibble dxgap_diseases shows diseases currently supported. years Integer matching year(s) report rendered. Can single integer like 2019, vector integers 2019:2021. vars vector strings naming columns subset data . Passed build_tbl(). Defaults NULL, indicating variables used. override_vars_check Logical indicating whether override checks supported vars. Defaults FALSE. TRUE, consistent results guaranteed. year Integer matching year report passed build_dm(). interactive Logical indicating whether open report RStudio Viewer.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/render.html","id":"vars-check","dir":"Reference","previous_headings":"","what":"Vars Check","title":"Render templates across multiple years — render_bulk","text":"check consists comparing character vector variable names supplied user vars argument, selected light exploratory data analysis. provided variables part original subset, function throw error. However, new variables names can always added overriding check setting override_vars_check = TRUE. new variable name part core subset, added dxgap_diseases tibble.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/render.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render templates across multiple years — render_bulk","text":"","code":"if (FALSE) { tb_vars <- c(\"year\", \"country\", \"is_hbc\", \"country_code\", \"who_dx_gap\",              \"pop_total\", \"pop_urban_perc\", \"pop_density\", \"gdp\", \"c_newinc\",              \"e_inc_num\", \"e_mort_100k\", \"culture\", \"smear\", \"xpert\", \"m_wrd\") render_bulk(\"eda.Rmd\", disease = \"tb\", years = 2018:2021, vars = tb_vars) } if (FALSE) { tb_vars <- c(\"year\", \"country\", \"is_hbc\", \"country_code\", \"who_dx_gap\",              \"pop_total\", \"pop_urban_perc\", \"pop_density\", \"gdp\", \"c_newinc\",              \"e_inc_num\", \"e_mort_100k\", \"culture\", \"smear\", \"xpert\", \"m_wrd\") render_report(\"eda.Rmd\", disease = \"tb\", year = 2019, vars = tb_vars) }"},{"path":"https://finddx.github.io/find.dxgap/reference/run_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a suite of statistical models — run_mod","title":"Run a suite of statistical models — run_mod","text":"run_mod() runs suite statistical models, returning final model fit.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/run_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a suite of statistical models — run_mod","text":"","code":"run_mod(   tbl,   mod,   preproc,   folds,   metrics,   rank_metric,   cross = TRUE,   seed = 2023 )"},{"path":"https://finddx.github.io/find.dxgap/reference/run_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a suite of statistical models — run_mod","text":"tbl Input data frame containing data model. mod list models run. preproc list pre-processing steps. folds integer. number cross-validation folds. metrics tibble containing performance metrics evaluate. rank_metric metric metrics rank results . cross logical: combinations pre-processors models used create workflows? FALSE, length preproc models equal. seed single integer.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/run_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a suite of statistical models — run_mod","text":"list containing workset, ranked model results, final model fit.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/run_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a suite of statistical models — run_mod","text":"","code":"if (FALSE) { tbl <-   build_tbl(\"tb\", 2019, vars = dxgap_const$tb_vars) |>   compute_dx_gap() |>   dplyr::mutate(is_hbc = forcats::as_factor(is_hbc)) |>   dplyr::select(-any_of(c(\"year\", \"country\")))   preproc_list <- get_mod_preproc(   .tbl = tbl,   .neighbors = tb_mod_const$neighbors,   .threshold = tb_mod_const$threshold,   .impute_vars = tb_mod_const$impute_vars  )  mod_list <- get_mod_mod(tb_mod_const$mode, tb_mod_const$engine)  run_mod(   tbl,   preproc = preproc_list,   mod = mod_list,   folds = tb_mod_const$folds,   metrics = tb_mod_const$metrics,   rank_metric = tb_mod_const$rank_metric, ) }"},{"path":"https://finddx.github.io/find.dxgap/reference/view_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"List available templates — view_templates","title":"List available templates — view_templates","text":"List available templates","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/view_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available templates — view_templates","text":"","code":"view_templates()"},{"path":"https://finddx.github.io/find.dxgap/reference/view_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List available templates — view_templates","text":"","code":"if (FALSE) { view_templates() }"},{"path":"https://finddx.github.io/find.dxgap/reference/wb.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from World Bank — wb","title":"Data from World Bank — wb","text":"help pages document lower-level API individually download, read, tidy data. higher-level API works across data sets, see: write_data_dir() download data","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/wb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from World Bank — wb","text":"","code":"download_wb(file_name, indicator, range_years)  read_wb(file_name, data_dir = Sys.getenv(\"DXGAP_DATADIR\"))  tidy_wb(data, year = NULL)"},{"path":"https://finddx.github.io/find.dxgap/reference/wb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data from World Bank — wb","text":"file_name string containing name file read. indicator string indicating label data set documented World Bank API. instance, \"SP.POP.TOTL\". range_years range years downloaded string. data_dir Path containing directory read data . Defaults path set environment variable \"DXGAP_DATADIR\". data tibble returned corresponding read_() function. year year filter data . Defaults NULL, returning data years.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/wb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data from World Bank — wb","text":"download_wb() returns invisibly file path data stored. read_wb() tibble containing data set. tidy_wb() tibble. tidied version input tibble.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/wb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from World Bank — wb","text":"data sets currently available World Bank package : urban population total population population density gdp","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/wb.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from World Bank — wb","text":"World Bank API documented https://datahelpdesk.worldbank.org/knowledgebase/articles/898581.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/wb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from World Bank — wb","text":"","code":"if (FALSE) { pop_urban <- download_wb(   file_name = paste_dataset_name_date(\"wb\", dataset = \"pop_urban\", file_ext = \".csv\"),   indicator = \"SP.URB.TOTL.IN.ZS\",   range_years = \"2015:2023\" ) pop_density <-   download_wb(     file_name = paste_dataset_name_date(\"wb\", dataset = \"pop_density\", file_ext = \".csv\"),     indicator = \"EN.POP.DNST\",     range_years = \"2015:2023\"   ) pop_total <- download_wb(   file_name = paste_dataset_name_date(\"wb\", dataset = \"pop_total\", file_ext = \".csv\"),   indicator = \"SP.POP.TOTL\",   range_years = \"2015:2023\" ) gdp <- download_wb(   file_name = paste_dataset_name_date(\"wb\", dataset = \"gdp\", file_ext = \".csv\"),   indicator = \"NY.GDP.MKTP.CD\",   range_years = \"2015:2023\" ) } if (FALSE) { read_wb(\"wb_pop_urban_2023-07-28.csv\") } if (FALSE) { read_wb(\"wb_pop_urban_2023-07-28.csv\") |>   tidy_wb() }"},{"path":"https://finddx.github.io/find.dxgap/reference/who.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from WHO — who","title":"Data from WHO — who","text":"help pages document lower-level API individually download, read, tidy data. higher-level API works across data sets, see: write_data_dir() download data","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/who.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from WHO — who","text":"","code":"download_who(file_name, url_endpoint)  read_who(file_name, data_dir = Sys.getenv(\"DXGAP_DATADIR\"))  tidy_who(data, year = NULL, .shape = \"long\")"},{"path":"https://finddx.github.io/find.dxgap/reference/who.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data from WHO — who","text":"file_name string containing name file read. url_endpoint string indicating name data set downloaded. One following: budget community estimates expenditure_utilisation labs notifications data_dir Path containing directory read data . Defaults path set environment variable \"DXGAP_DATADIR\". data tibble returned corresponding read_() function. year year filter data . Defaults NULL, returning data years. .shape string indicating data \"wide\", \"long\" format. Defaults \"long\".","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/who.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data from WHO — who","text":"download_who() returns invisibly file path data stored. read_who() returns tibble containing data set. tidy_who() returns s tibble. tidied version input tibble.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/who.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from WHO — who","text":"data sets currently available package : notifications estimates budget community expenditures laboratories hbc","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/who.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from WHO — who","text":"","code":"if (FALSE) { notification <- download_who(   file_name = paste_dataset_name_date(\"who\", dataset = \"notifications\", file_ext = \".csv\"),   url_endpoint = \"notifications\" ) estimates <- download_who(   file_name = paste_dataset_name_date(\"who\", dataset = \"estimates\", file_ext = \".csv\"),   url_endpoint = \"estimates\" ) budget <- download_who(   file_name = paste_dataset_name_date(\"who\", dataset = \"budget\", file_ext = \".csv\"),   url_endpoint = \"budget\" ) community_engagement <- download_who(   file_name = paste_dataset_name_date(\"who\", dataset = \"community\", file_ext = \".csv\"),   url_endpoint = \"community\" ) expenditure_and_utilisation <- download_who(   file_name = paste_dataset_name_date(\"who\", dataset = \"expenditures\", file_ext = \".csv\"),   url_endpoint = \"expenditure_utilisation\" ) laboratories <- download_who(   file_name = paste_dataset_name_date(\"who\", dataset = \"laboratories\", file_ext = \".csv\"),   url_endpoint = \"labs\" ) } if (FALSE) { read_who(\"who_laboratories_2023-08-30.csv\") read_who(\"who_hbc_2023-07-28.csv\") } if (FALSE) { read_who(\"who_laboratories_2023-08-30.csv\") |>   tidy_who() }"},{"path":"https://finddx.github.io/find.dxgap/reference/write_data_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a folder containing data for the project. — write_data_dir","title":"Create a folder containing data for the project. — write_data_dir","text":"Data project now stored repository called find.dxgap.data.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/write_data_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a folder containing data for the project. — write_data_dir","text":"","code":"write_data_dir(path = fs::path_dir(getwd()), dirs = character(0))"},{"path":"https://finddx.github.io/find.dxgap/reference/write_data_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a folder containing data for the project. — write_data_dir","text":"path path folder created. default, created level find.dxgap root directory. dirs Defaults character(0). optional character vector build additional sub-folders. yet use.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/write_data_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a folder containing data for the project. — write_data_dir","text":"path folder, invisibly.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/write_data_dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a folder containing data for the project. — write_data_dir","text":"function side effects. creates folder storing data project. addition sets DXGAP_DATADIR environment variable needed read_*() family functions work, particular running tests.","code":""},{"path":"https://finddx.github.io/find.dxgap/reference/write_data_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a folder containing data for the project. — write_data_dir","text":"","code":"if (FALSE) { write_data_dir() # Create folder at same level as project write_data_dir(\"~/Documents/my_projects\") # Specify specific folder }"}]
